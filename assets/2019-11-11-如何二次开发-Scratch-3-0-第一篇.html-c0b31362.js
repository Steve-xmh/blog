import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o,c as r,a as e,b as c,d as t,e as d}from"./app-be572551.js";const i="/blog/assets/images/2019/11/11/scratch.mit.edu_projects_editor.png",l="/blog/assets/images/2019/11/11/ThatISme.png",h={},p=e("p",null,"没错，我又来写二次开发了。 一个周末连肝三篇文章的我无所畏惧！ 那么进入主题：",-1),u=e("h2",{id:"scratch-3-0-源代码的大致情况",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#scratch-3-0-源代码的大致情况","aria-hidden":"true"},"#"),c(" Scratch 3.0 源代码的大致情况")],-1),_=e("p",null,"在着手二次开发 Scratch 3.0 之前，我们先要了解目前的 Scratch 3.0 的开发布局。 为了提升代码的可用性（其实是迎合谷歌的 Blocky），Scratch 3.0 被拆分成许多部分。 也就是说你看到的 Scratch 3.0 成品其实是由多个不同作用的模块组合而成的，而这些模块很大部分可以独立工作而不受影响。 目前肉眼可见的模块大致这样：",-1),m=e("figure",null,[e("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),g=e("p",null,"当然，本篇二次开发不会一一解释这些模块的具体用途，我们只需要了解一些地位比较高，比较重要的模块即可。",-1),b={href:"https://github.com/LLK/scratch-gui",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/LLK/scratch-vm",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/LLK/scratch-render",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/LLK/scratch-blocks",target:"_blank",rel:"noopener noreferrer"},S=e("p",null,[c("（注意："),e("code",null,"scratch-blocks"),c(" 因为需要编译非常多的模块，导致编译器参数命令行过长无法编译，可能不能在 Windows 平台编译！）")],-1),x=e("code",null,"scratch-gui",-1),L=e("code",null,"scratch-render",-1),w=e("code",null,"scratch-vm",-1),W=e("code",null,"scratch-blocks",-1),j={href:"https://github.com/LLK/scratch-gui/wiki",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"“他们的虚拟机在哪啊？” “这个语言是什么啊？根本不像 js 啊？” “怎么加个模块路径还藏的这么深啊，什么 node_modules 什么的麻烦死了！”",-1),I=e("p",null,"那么同样是为了排除问题，快速进行开发，请继续往下看。。。",-1),K=e("h2",{id:"搭建开发环境",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#搭建开发环境","aria-hidden":"true"},"#"),c(" 搭建开发环境")],-1),N=e("code",null,"scratch-blocks",-1),V=e("code",null,"scratch-blocks",-1),B={href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack",target:"_blank",rel:"noopener noreferrer"},U=e("h2",{id:"如何进行多模块开发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#如何进行多模块开发","aria-hidden":"true"},"#"),c(" 如何进行多模块开发")],-1),E={href:"https://docs.npmjs.com/cli/link.html",target:"_blank",rel:"noopener noreferrer"},T=d(`<p>那么为了能够将模块相互链接，我们需要使用 npm 的链接功能，这个功能可以将某个 nodejs 工程链接到全局，然后再通过某个工程的引用链接来使用这个模块，这样你就不需要死盯着 node_modules 文件夹找模块写代码了。</p><p>那么下面以 <code>scratch-vm</code> 和 <code>scratch-gui</code> 组合进行开发为例讲解如何</p><p>首先克隆 <code>scratch-vm</code> 源码库到一个文件夹，进入文件夹后在终端输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>path/to/scratch-vm<span class="token operator">&gt;</span> <span class="token function">npm</span> i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待一会后，再克隆 <code>scratch-gui</code> 到任意文件夹（也可以和 <code>scratch-vm</code> 同一个文件夹，但最好就放一起），在这个文件夹打开终端输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>path/to/scratch-gui<span class="token operator">&gt;</span> <span class="token function">npm</span> i
path/to/scratch-gui<span class="token operator">&gt;</span> <span class="token function">npm</span> <span class="token function">ln</span> path/to/scratch-vm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，npm 就会在 <code>scratch-gui</code> 的模块文件夹中创建指向刚刚我们克隆的 <code>scratch-vm</code> 的快捷方式（或者叫链接），<code>scratch-gui</code> 调用到 <code>scratch-vm</code> 的模块时将会从这个文件夹中寻找所需的模块。如果你把两个源代码放在一个文件夹的话，使用相对目录也没有问题。 大功告成！你已经知道如何链接模块，如果你需要删除链接的话，只需要输入在终端输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>path/to/scratch-gui<span class="token operator">&gt;</span> <span class="token function">npm</span> r scratch-vm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：模块的名称是以 <code>package.json</code> 中的 <code>name</code> 键值为准，和你的源码所在文件夹的名称无关，也就是说你可以在链接前重命名文件夹，只要你喜欢 😃</p><p>完成之后，现在你应该可以通过 <code>scratch-gui</code> 的 <code>webpack-dev-server</code> 来进行开发了，你在 <code>scratch-vm</code> 所做的更改都会作用在你的 <code>scratch-gui</code> 上。回到 <code>scratch-gui</code> 的工程目录，打开终端输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>path/to/scratch-gui<span class="token operator">&gt;</span> <span class="token function">npm</span> start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就可以开始自由改造了~ 后面会详细介绍各个模块的改造方式，所以呢，To be continued --&gt;</p><figure><img src="`+l+'" alt="嘿嘿嘿 " tabindex="0" loading="lazy"><figcaption>嘿嘿嘿 </figcaption></figure>',13);function z(C,G){const s=n("ExternalLinkIcon");return o(),r("div",null,[p,u,_,m,g,e("ul",null,[e("li",null,[e("a",b,[c("scratch-gui"),t(s)]),c(" 是将所有模块组合在一起的 GUI 框架。")]),e("li",null,[e("a",v,[c("scratch-vm"),t(s)]),c(" 是 Scratch 3.0 的虚拟机模块，是 Scratch 3.0 的核心。")]),e("li",null,[e("a",f,[c("scratch-render"),t(s)]),c(" 是 Scratch 3.0 的渲染器模块，舞台画面由它负责。")]),e("li",null,[e("a",k,[c("scratch-blocks"),t(s)]),c(" 是 Scratch 3.0 的代码编辑模块，通过它来拖拽模块编写代码。")])]),S,e("p",null,[c("以上是我认为比较重要的模块，了解他们的具体用途对后面多模块开发有一定帮助。 一般只需要修改 UI（加自己的图标什么的）的话，你只需要使用 "),x,c(" 即可。 但是如果你需要添加自定义模块，比如打印字符串的话，你可能还需要 "),L,c(),w,c(),W,c(" 这三个。 一个负责处理文字显示，一个负责执行模块，一个负责给用户提供可操作的模块。 简言之，我一开始想尝试二次开发的时候，因为没有仔细看官方的"),e("a",j,[c("简略文档"),t(s)]),c("所以总是认为：")]),y,I,K,e("p",null,[c("首先，十分建议大家使用 Linux 系统（Ubuntu, MacOS 之类的）来作为搭建环境的主操作系统，因为 Windows 的命令行单条命令长度最大只能达到 8192 个字符。 而 "),N,c(" 的预发行流程所需要执行的编译器参数（这些参数都是文件路径，而且文件非常多（模块化带来的缺陷啊））已经远远超过 8192 个字符，再加上 google 的奇葩编译参数尿性， "),V,c(" 不能在 Windows 正确编译。 （似乎可以使用 python 安装程序最后的一个选项来解锁命令行参数限制？） 倘若你真的是 Windows 党的话，你也可以使用 Windows Subsystem for Linux (WSL) 子系统来在 Windows 里运行 Ubuntu。 VS Code 也有可以方便与 WSL 系统交互的远程开发插件，详情"),e("a",B,[c("戳这里前往插件下载"),t(s)]),c("。 那么下面就假定大家已经克隆了源码库到一个文件夹里，进行多模块之间的链接。")]),U,e("p",null,[c("我一开始想尝试二次开发 Scratch 3.0 的原因是为了将 SteveScratch 转移到 js 进行开发，但是因为过去有很多的自定义模块所以犯了不少困难。尤其是不清楚 nodejs 的"),e("a",E,[c("模块链接"),t(s)]),c("功能，结果导致我不得不打消二次开发的念头，现在 2019 学业跟的紧，更没有时间继续开发了。")]),T])}const q=a(h,[["render",z],["__file","2019-11-11-如何二次开发-Scratch-3-0-第一篇.html.vue"]]);export{q as default};
